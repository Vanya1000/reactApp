{"version":3,"sources":["pages/Chat/ChatPage.tsx","../node_modules/@babel/runtime/helpers/esm/objectDestructuringEmpty.js"],"names":["Chat","dispatch","useDispatch","status","useSelector","state","chat","useEffect","startMessagesListening","stopMessagesListening","Messages","obj","TypeError","messages","messagesAnchorRef","useRef","useState","isAutoScroll","setIsAutoScroll","current","scrollIntoView","behavior","style","height","overflowY","onScroll","e","element","currentTarget","Math","abs","scrollHeight","scrollTop","clientHeight","map","m","index","Message","message","id","ref","React","memo","console","log","src","photo","width","userName","AddMessageForm","setMessage","onChange","value","disabled","onClick","sendMessage","ChatPage"],"mappings":"sKAaMA,EAAiB,WAEtB,IAAMC,EAAWC,cAGXC,EAASC,aAAY,SAACC,GAAD,OAAyBA,EAAMC,KAAKH,UAS/D,OAPAI,qBAAU,WAET,OADAN,EAASO,eACF,WACNP,EAASQ,kBAER,IAEI,gCACM,UAAXN,GAAsB,8EACvB,qCACC,cAAC,EAAD,IACA,cAAC,EAAD,WAKGO,EAAyB,SAAC,ICpCjB,SAAmCC,GAChD,GAAW,MAAPA,EAAa,MAAM,IAAIC,UAAU,gCDmCE,IACxC,IAAMC,EAAWT,aAAY,SAACC,GAAD,OAAyBA,EAAMC,KAAKO,YAC3DC,EAAoBC,iBAAuB,MACjD,EAAwCC,oBAAS,GAAjD,mBAAOC,EAAP,KAAqBC,EAArB,KAiBA,OANAX,qBAAU,WACU,IAAD,EAAdU,IACH,UAAAH,EAAkBK,eAAlB,SAA2BC,eAAe,CAAEC,SAAU,cAErD,CAACR,IAEG,sBAAKS,MAAO,CAAEC,OAAQ,QAASC,UAAW,QAAUC,SAfrC,SAACC,GACtB,IAAMC,EAAUD,EAAEE,cACdC,KAAKC,IAAKH,EAAQI,aAAeJ,EAAQK,UAAaL,EAAQM,cAAgB,KAChFhB,GAAgBC,GAAgB,GAEjCD,GAAgBC,GAAgB,IAU3B,UACLL,EAASqB,KAAI,SAACC,EAAGC,GAAJ,OAAc,cAACC,EAAD,CAAoBC,QAASH,GAAfA,EAAEI,OAC5C,qBAAKC,IAAK1B,QAKNuB,EAAqDI,IAAMC,MAAK,YAAkB,IAAfJ,EAAc,EAAdA,QAExE,OADAK,QAAQC,IAAI,iBACL,gCACN,qBAAKC,IAAKP,EAAQQ,MAAOxB,MAAO,CAAEyB,MAAO,UADnC,IACgD,4BAAIT,EAAQU,WAClE,uBACCV,EAAQA,QACT,6BAKIW,EAA+B,WACpC,MAA8BjC,mBAAS,IAAvC,mBAAOsB,EAAP,KAAgBY,EAAhB,KACMjD,EAAWC,cAEXC,EAASC,aAAY,SAACC,GAAD,OAAyBA,EAAMC,KAAKH,UAW/D,OAAO,gCACN,8BACC,0BAAUgD,SAAU,SAACzB,GAAD,OAAOwB,EAAWxB,EAAEE,cAAcwB,QAAQA,MAAOd,MAEtE,8BACC,wBAAQe,SAAqB,UAAXlD,EAAoBmD,QAbb,WACrBhB,IAGLrC,EAASsD,YAAYjB,IACrBY,EAAW,MAQV,wBAKYM,UA5FY,WAC1B,OAAO,8BACN,cAAC,EAAD","file":"static/js/3.c95eb6b3.chunk.js","sourcesContent":["import React, { useEffect, useRef, useState } from 'react'\r\nimport { ChatMessageAPIType } from '../../api/chat-api'\r\nimport { useDispatch, useSelector } from 'react-redux'\r\nimport { sendMessage, startMessagesListening, stopMessagesListening } from '../../redux/chat-reducer'\r\nimport { AppStateType } from '../../redux/redux-store'\r\n\r\n\r\nconst ChatPage: React.FC = () => {\r\n\treturn <div>\r\n\t\t<Chat />\r\n\t</div>\r\n}\r\n\r\nconst Chat: React.FC = () => {\r\n\r\n\tconst dispatch = useDispatch()\r\n\r\n\r\n\tconst status = useSelector((state: AppStateType) => state.chat.status)\r\n\r\n\tuseEffect(() => {\r\n\t\tdispatch(startMessagesListening())\r\n\t\treturn () => {\r\n\t\t\tdispatch(stopMessagesListening())\r\n\t\t}\r\n\t}, [])\r\n\r\n\treturn <div>\r\n\t\t{status === 'error' && <div>Some error occured. Please refresh the page</div>}\r\n\t\t<>\r\n\t\t\t<Messages />\r\n\t\t\t<AddMessageForm />\r\n\t\t</>\r\n\t</div>\r\n}\r\n\r\nconst Messages: React.FC<{}> = ({ }) => {\r\n\tconst messages = useSelector((state: AppStateType) => state.chat.messages)\r\n\tconst messagesAnchorRef = useRef<HTMLDivElement>(null);\r\n\tconst [isAutoScroll, setIsAutoScroll] = useState(true)\r\n\r\n\tconst scrollHandler = (e: React.UIEvent<HTMLDivElement, UIEvent>) => {\r\n\t\tconst element = e.currentTarget;\r\n\t\tif (Math.abs((element.scrollHeight - element.scrollTop) - element.clientHeight) < 300) {\r\n\t\t\t!isAutoScroll && setIsAutoScroll(true)\r\n\t\t} else {\r\n\t\t\tisAutoScroll && setIsAutoScroll(false)\r\n\t\t}\r\n\t}\r\n\r\n\tuseEffect(() => {\r\n\t\tif (isAutoScroll) {\r\n\t\t\tmessagesAnchorRef.current?.scrollIntoView({ behavior: 'smooth' })\r\n\t\t}\r\n\t}, [messages])\r\n\r\n\treturn <div style={{ height: '400px', overflowY: 'auto' }} onScroll={scrollHandler}>\r\n\t\t{messages.map((m, index) => <Message key={m.id} message={m} />)}\r\n\t\t<div ref={messagesAnchorRef}></div>\r\n\t</div>\r\n}\r\n\r\n\r\nconst Message: React.FC<{ message: ChatMessageAPIType }> = React.memo(({ message }) => {\r\n\tconsole.log(\">>>>>>Message\")\r\n\treturn <div>\r\n\t\t<img src={message.photo} style={{ width: '30px' }} /> <b>{message.userName}</b>\r\n\t\t<br />\r\n\t\t{message.message}\r\n\t\t<hr />\r\n\t</div>\r\n})\r\n\r\n\r\nconst AddMessageForm: React.FC<{}> = () => {\r\n\tconst [message, setMessage] = useState('')\r\n\tconst dispatch = useDispatch()\r\n\r\n\tconst status = useSelector((state: AppStateType) => state.chat.status)\r\n\r\n\r\n\tconst sendMessageHandler = () => {\r\n\t\tif (!message) {\r\n\t\t\treturn\r\n\t\t}\r\n\t\tdispatch(sendMessage(message))\r\n\t\tsetMessage('')\r\n\t}\r\n\r\n\treturn <div>\r\n\t\t<div>\r\n\t\t\t<textarea onChange={(e) => setMessage(e.currentTarget.value)} value={message}></textarea>\r\n\t\t</div>\r\n\t\t<div>\r\n\t\t\t<button disabled={status !== 'ready'} onClick={sendMessageHandler}>Send</button>\r\n\t\t</div>\r\n\t</div>\r\n}\r\n\r\nexport default ChatPage\r\n","export default function _objectDestructuringEmpty(obj) {\n  if (obj == null) throw new TypeError(\"Cannot destructure undefined\");\n}"],"sourceRoot":""}